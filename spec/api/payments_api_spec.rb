=begin
#Checkout.com API Reference

## Introduction Checkout.com provides a collection of APIs that enable you to process and manage payments.    Our APIs accept and return JSON in the HTTP body and return HTTP response codes to indicate errors. You can consume the APIs directly using your favorite HTTP/REST library or make use of one of our <a href=\"https://docs.checkout.com/quickstart/integrate/sdks\" target=\"_blank\">SDKs</a>.    Our unified payments API allows you to accept payments from cards, digital wallets and the most popular alternative payment methods, as well as pay out to a variety of destinations, all using the same integration.  And with our webhook management, events and disputes APIs, you can keep on top of your transactions and react to any chargebacks, keeping your business running smoothly. # Authentication When you sign up for an account, you are given a secret and public API key pair. You authenticate with our API by providing the appropriate key in the request Authorization header.  Never share your secret keys. Keep them guarded and secure.   <!-- ReDoc-Inject: <security-definitions> --> 

The version of the OpenAPI document: 1.0.0
Contact: support@checkout.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::PaymentsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PaymentsApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::PaymentsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PaymentsApi' do
    it 'should create an instance of PaymentsApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::PaymentsApi)
    end
  end

  # unit tests for capture_a_payment
  # Capture a payment
  # Captures a payment if supported by the payment method.  For card payments, capture requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the capture is successful. 
  # @param id The payment identifier
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cko_idempotency_key An optional idempotency key for safely retrying payment requests
  # @option opts [CaptureRequest] :capture_request 
  # @return [CaptureAcceptedResponse]
  describe 'capture_a_payment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_payment_actions
  # Get payment actions
  # Returns all the actions associated with a payment ordered by processing date in descending order (latest first). 
  # @param id The payment identifier
  # @param [Hash] opts the optional parameters
  # @return [Array<PaymentAction>]
  describe 'get_payment_actions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_payment_details
  # Get payment details
  # Returns the details of the payment with the specified identifier string.  If the payment method requires a redirection to a third party (e.g., 3D Secure), the redirect URL back to your site will include a &#x60;cko-session-id&#x60; query parameter containing a payment session ID that can be used to obtain the details of the payment, for example:  http://example.com/success?cko-session-id&#x3D;sid_ubfj2q76miwundwlk72vxt2i7q. 
  # @param id The payment or payment session identifier
  # @param [Hash] opts the optional parameters
  # @return [Payment]
  describe 'get_payment_details test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for refund_a_payment
  # Refund a payment
  # Refunds a payment if supported by the payment method.  For card payments, refund requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the refund is successful. 
  # @param id The payment identifier
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cko_idempotency_key An optional idempotency key for safely retrying payment requests
  # @option opts [RefundRequest] :refund_request 
  # @return [RefundAcceptedResponse]
  describe 'refund_a_payment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for request_a_payment_or_payout
  # Request a payment or payout
  # To accept payments from &lt;a href&#x3D;\&quot;https://docs.checkout.com/payment-methods/cards\&quot; target&#x3D;\&quot;blank\&quot;&gt;cards&lt;/a&gt;, &lt;a href&#x3D;\&quot;https://docs.checkout.com/payment-methods/wallets\&quot; target&#x3D;\&quot;blank\&quot;&gt;digital wallets&lt;/a&gt; and many &lt;a href&#x3D;\&quot;https://docs.checkout.com/payment-methods/\&quot; target&#x3D;\&quot;blank\&quot;&gt;alternative payment methods&lt;/a&gt;, specify the &#x60;source.type&#x60; field, along with the source-specific data.  To &lt;a href&#x3D;\&quot;https://docs.checkout.com/payment-actions/pay-out-to-a-card\&quot; target&#x3D;\&quot;blank\&quot;&gt;pay out to a card&lt;/a&gt;, specify the destination of your payout using the &#x60;destination.type&#x60; field, along with the destination-specific data.  To verify the success of the payment, check the &#x60;approved&#x60; field in the response. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cko_idempotency_key An optional idempotency key for safely retrying payment requests
  # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
  # @return [PaymentResponse]
  describe 'request_a_payment_or_payout test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for void_a_payment
  # Void a payment
  # Voids a payment if supported by the payment method.  For card payments, void requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the void is successful. 
  # @param id The payment identifier
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cko_idempotency_key An optional idempotency key for safely retrying payment requests
  # @option opts [VoidRequest] :void_request 
  # @return [VoidAcceptedResponse]
  describe 'void_a_payment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
