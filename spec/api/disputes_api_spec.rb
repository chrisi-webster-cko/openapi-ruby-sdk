=begin
#Checkout.com API Reference

## Introduction Checkout.com provides a collection of APIs that enable you to process and manage payments.    Our APIs accept and return JSON in the HTTP body and return HTTP response codes to indicate errors. You can consume the APIs directly using your favorite HTTP/REST library or make use of one of our <a href=\"https://docs.checkout.com/quickstart/integrate/sdks\" target=\"_blank\">SDKs</a>.    Our unified payments API allows you to accept payments from cards, digital wallets and the most popular alternative payment methods, as well as pay out to a variety of destinations, all using the same integration.  And with our webhook management, events and disputes APIs, you can keep on top of your transactions and react to any chargebacks, keeping your business running smoothly. # Authentication When you sign up for an account, you are given a secret and public API key pair. You authenticate with our API by providing the appropriate key in the request Authorization header.  Never share your secret keys. Keep them guarded and secure.   <!-- ReDoc-Inject: <security-definitions> --> 

The version of the OpenAPI document: 1.0.0
Contact: support@checkout.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::DisputesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DisputesApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::DisputesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DisputesApi' do
    it 'should create an instance of DisputesApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::DisputesApi)
    end
  end

  # unit tests for accept_dispute
  # Accept dispute
  # If a dispute is legitimate, you can choose to accept it. This will close it for you and remove it from your list of open disputes. There are no further financial implications.
  # @param dispute_id The dispute identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'accept_dispute test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_dispute_details
  # Get dispute details
  # Returns all the details of a dispute using the dispute identifier.
  # @param dispute_id The dispute identifier
  # @param [Hash] opts the optional parameters
  # @return [Dispute]
  describe 'get_dispute_details test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_dispute_evidence
  # Get dispute evidence
  # Retrieves a list of the evidence submitted in response to a specific dispute.  
  # @param dispute_id The dispute identifier
  # @param [Hash] opts the optional parameters
  # @return [Evidence]
  describe 'get_dispute_evidence test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_disputes
  # Get disputes
  # Returns a list of all disputes against your business. The results will be returned in reverse chronological order, showing the last modified dispute (for example, where you&#39;ve recently added a piece of evidence) first. You can use the optional parameters below to skip or limit results.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The numbers of results to return
  # @option opts [Integer] :skip The number of results to skip
  # @option opts [String] :from The date and time from which to filter disputes, based on the dispute&#39;s &#x60;last_update&#x60; field
  # @option opts [String] :to The date and time until which to filter disputes, based on the dispute&#39;s &#x60;last_update&#x60; field
  # @option opts [String] :id The unique identifier of the dispute
  # @option opts [String] :statuses One or more comma-separated statuses. This works like a logical *OR* operator
  # @option opts [String] :payment_id The unique identifier of the payment
  # @option opts [String] :payment_reference An optional reference (such as an order ID) that you can use later to identify the payment. Previously known as &#x60;TrackId&#x60;
  # @option opts [String] :payment_arn The acquirer reference number (ARN) that you can use to query the issuing bank
  # @option opts [Boolean] :this_channel_only If &#x60;true&#x60;, only returns disputes of the specific channel that the secret key is associated with. Otherwise, returns all disputes for that business
  # @return [DisputePaged]
  describe 'get_disputes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_file_information
  # Get file information
  # Retrieve information about a file that was previously uploaded.
  # @param file_id The file identifier. It is always prefixed by &#x60;file_&#x60;.
  # @param [Hash] opts the optional parameters
  # @return [FileResult]
  describe 'get_file_information test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for provide_dispute_evidence
  # Provide dispute evidence
  # Adds supporting evidence to a dispute. Before using this endpoint, you first need to [upload your files](#tag/Disputes/paths/~1files/post) using the file uploader. You will receive a file id (prefixed by &#x60;file_&#x60;) which you can then use in your request. Note that this only attaches the evidence to the dispute, it does not send it to us. Once ready, you will need to submit it.  **You must provide at least one evidence type in the body of your request.** 
  # @param dispute_id The dispute identifier
  # @param [Hash] opts the optional parameters
  # @option opts [ProvideEvidenceRequest] :provide_evidence_request 
  # @return [nil]
  describe 'provide_dispute_evidence test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for submit_dispute_evidence
  # Submit dispute evidence
  # With this final request, you can submit the evidence that you have previously provided. Make sure you have provided all the relevant information before using this request. You will not be able to amend your evidence once you have submitted it.
  # @param dispute_id The dispute identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'submit_dispute_evidence test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_file
  # Upload file
  # Upload a file to use as evidence in a dispute. Your file must be in either JPEG/JPG, PNG or PDF format, and be no larger than 4MB.
  # @param file The path of the file to upload, and its type. &lt;br&gt;&lt;i&gt;This must be a local path.&lt;/i&gt;
  # @param purpose The purpose of the file upload. You must set this to &#x60;dispute_evidence&#x60;
  # @param [Hash] opts the optional parameters
  # @return [FileUploadResponse]
  describe 'upload_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
