=begin
#Checkout.com API Reference

## Introduction Checkout.com provides a collection of APIs that enable you to process and manage payments.    Our APIs accept and return JSON in the HTTP body and return HTTP response codes to indicate errors. You can consume the APIs directly using your favorite HTTP/REST library or make use of one of our <a href=\"https://docs.checkout.com/quickstart/integrate/sdks\" target=\"_blank\">SDKs</a>.    Our unified payments API allows you to accept payments from cards, digital wallets and the most popular alternative payment methods, as well as pay out to a variety of destinations, all using the same integration.  And with our webhook management, events and disputes APIs, you can keep on top of your transactions and react to any chargebacks, keeping your business running smoothly. # Authentication When you sign up for an account, you are given a secret and public API key pair. You authenticate with our API by providing the appropriate key in the request Authorization header.  Never share your secret keys. Keep them guarded and secure.   <!-- ReDoc-Inject: <security-definitions> --> 

The version of the OpenAPI document: 1.0.0
Contact: support@checkout.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0

=end

require 'cgi'

module OpenapiClient
  class PaymentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Capture a payment
    # Captures a payment if supported by the payment method.  For card payments, capture requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the capture is successful. 
    # @param id [String] The payment identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cko_idempotency_key An optional idempotency key for safely retrying payment requests
    # @option opts [CaptureRequest] :capture_request 
    # @return [CaptureAcceptedResponse]
    def capture_a_payment(id, opts = {})
      data, _status_code, _headers = capture_a_payment_with_http_info(id, opts)
      data
    end

    # Capture a payment
    # Captures a payment if supported by the payment method.  For card payments, capture requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the capture is successful. 
    # @param id [String] The payment identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cko_idempotency_key An optional idempotency key for safely retrying payment requests
    # @option opts [CaptureRequest] :capture_request 
    # @return [Array<(CaptureAcceptedResponse, Integer, Hash)>] CaptureAcceptedResponse data, response status code and response headers
    def capture_a_payment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.capture_a_payment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentsApi.capture_a_payment"
      end
      pattern = Regexp.new(/^(pay)_(\w{26})$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling PaymentsApi.capture_a_payment, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/payments/{id}/captures'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Cko-Idempotency-Key'] = opts[:'cko_idempotency_key'] if !opts[:'cko_idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'capture_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CaptureAcceptedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiSecretKey']

      new_options = opts.merge(
        :operation => :"PaymentsApi.capture_a_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#capture_a_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get payment actions
    # Returns all the actions associated with a payment ordered by processing date in descending order (latest first). 
    # @param id [String] The payment identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<PaymentAction>]
    def get_payment_actions(id, opts = {})
      data, _status_code, _headers = get_payment_actions_with_http_info(id, opts)
      data
    end

    # Get payment actions
    # Returns all the actions associated with a payment ordered by processing date in descending order (latest first). 
    # @param id [String] The payment identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PaymentAction>, Integer, Hash)>] Array<PaymentAction> data, response status code and response headers
    def get_payment_actions_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.get_payment_actions ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentsApi.get_payment_actions"
      end
      pattern = Regexp.new(/^(pay)_(\w{26})$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling PaymentsApi.get_payment_actions, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/payments/{id}/actions'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PaymentAction>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiSecretKey']

      new_options = opts.merge(
        :operation => :"PaymentsApi.get_payment_actions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#get_payment_actions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get payment details
    # Returns the details of the payment with the specified identifier string.  If the payment method requires a redirection to a third party (e.g., 3D Secure), the redirect URL back to your site will include a `cko-session-id` query parameter containing a payment session ID that can be used to obtain the details of the payment, for example:  http://example.com/success?cko-session-id=sid_ubfj2q76miwundwlk72vxt2i7q. 
    # @param id [String] The payment or payment session identifier
    # @param [Hash] opts the optional parameters
    # @return [Payment]
    def get_payment_details(id, opts = {})
      data, _status_code, _headers = get_payment_details_with_http_info(id, opts)
      data
    end

    # Get payment details
    # Returns the details of the payment with the specified identifier string.  If the payment method requires a redirection to a third party (e.g., 3D Secure), the redirect URL back to your site will include a &#x60;cko-session-id&#x60; query parameter containing a payment session ID that can be used to obtain the details of the payment, for example:  http://example.com/success?cko-session-id&#x3D;sid_ubfj2q76miwundwlk72vxt2i7q. 
    # @param id [String] The payment or payment session identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Payment, Integer, Hash)>] Payment data, response status code and response headers
    def get_payment_details_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.get_payment_details ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentsApi.get_payment_details"
      end
      pattern = Regexp.new(/^(pay|sid)_(\w{26})$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling PaymentsApi.get_payment_details, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/payments/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Payment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiSecretKey']

      new_options = opts.merge(
        :operation => :"PaymentsApi.get_payment_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#get_payment_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Refund a payment
    # Refunds a payment if supported by the payment method.  For card payments, refund requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the refund is successful. 
    # @param id [String] The payment identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cko_idempotency_key An optional idempotency key for safely retrying payment requests
    # @option opts [RefundRequest] :refund_request 
    # @return [RefundAcceptedResponse]
    def refund_a_payment(id, opts = {})
      data, _status_code, _headers = refund_a_payment_with_http_info(id, opts)
      data
    end

    # Refund a payment
    # Refunds a payment if supported by the payment method.  For card payments, refund requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the refund is successful. 
    # @param id [String] The payment identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cko_idempotency_key An optional idempotency key for safely retrying payment requests
    # @option opts [RefundRequest] :refund_request 
    # @return [Array<(RefundAcceptedResponse, Integer, Hash)>] RefundAcceptedResponse data, response status code and response headers
    def refund_a_payment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.refund_a_payment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentsApi.refund_a_payment"
      end
      pattern = Regexp.new(/^(pay)_(\w{26})$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling PaymentsApi.refund_a_payment, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/payments/{id}/refunds'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Cko-Idempotency-Key'] = opts[:'cko_idempotency_key'] if !opts[:'cko_idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'refund_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'RefundAcceptedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiSecretKey']

      new_options = opts.merge(
        :operation => :"PaymentsApi.refund_a_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#refund_a_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Request a payment or payout
    # To accept payments from <a href=\"https://docs.checkout.com/payment-methods/cards\" target=\"blank\">cards</a>, <a href=\"https://docs.checkout.com/payment-methods/wallets\" target=\"blank\">digital wallets</a> and many <a href=\"https://docs.checkout.com/payment-methods/\" target=\"blank\">alternative payment methods</a>, specify the `source.type` field, along with the source-specific data.  To <a href=\"https://docs.checkout.com/payment-actions/pay-out-to-a-card\" target=\"blank\">pay out to a card</a>, specify the destination of your payout using the `destination.type` field, along with the destination-specific data.  To verify the success of the payment, check the `approved` field in the response. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cko_idempotency_key An optional idempotency key for safely retrying payment requests
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [PaymentResponse]
    def request_a_payment_or_payout(opts = {})
      data, _status_code, _headers = request_a_payment_or_payout_with_http_info(opts)
      data
    end

    # Request a payment or payout
    # To accept payments from &lt;a href&#x3D;\&quot;https://docs.checkout.com/payment-methods/cards\&quot; target&#x3D;\&quot;blank\&quot;&gt;cards&lt;/a&gt;, &lt;a href&#x3D;\&quot;https://docs.checkout.com/payment-methods/wallets\&quot; target&#x3D;\&quot;blank\&quot;&gt;digital wallets&lt;/a&gt; and many &lt;a href&#x3D;\&quot;https://docs.checkout.com/payment-methods/\&quot; target&#x3D;\&quot;blank\&quot;&gt;alternative payment methods&lt;/a&gt;, specify the &#x60;source.type&#x60; field, along with the source-specific data.  To &lt;a href&#x3D;\&quot;https://docs.checkout.com/payment-actions/pay-out-to-a-card\&quot; target&#x3D;\&quot;blank\&quot;&gt;pay out to a card&lt;/a&gt;, specify the destination of your payout using the &#x60;destination.type&#x60; field, along with the destination-specific data.  To verify the success of the payment, check the &#x60;approved&#x60; field in the response. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cko_idempotency_key An optional idempotency key for safely retrying payment requests
    # @option opts [UNKNOWN_BASE_TYPE] :unknown_base_type 
    # @return [Array<(PaymentResponse, Integer, Hash)>] PaymentResponse data, response status code and response headers
    def request_a_payment_or_payout_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.request_a_payment_or_payout ...'
      end
      # resource path
      local_var_path = '/payments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Cko-Idempotency-Key'] = opts[:'cko_idempotency_key'] if !opts[:'cko_idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'unknown_base_type'])

      # return_type
      return_type = opts[:debug_return_type] || 'PaymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiSecretKey']

      new_options = opts.merge(
        :operation => :"PaymentsApi.request_a_payment_or_payout",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#request_a_payment_or_payout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Void a payment
    # Voids a payment if supported by the payment method.  For card payments, void requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the void is successful. 
    # @param id [String] The payment identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cko_idempotency_key An optional idempotency key for safely retrying payment requests
    # @option opts [VoidRequest] :void_request 
    # @return [VoidAcceptedResponse]
    def void_a_payment(id, opts = {})
      data, _status_code, _headers = void_a_payment_with_http_info(id, opts)
      data
    end

    # Void a payment
    # Voids a payment if supported by the payment method.  For card payments, void requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the void is successful. 
    # @param id [String] The payment identifier
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cko_idempotency_key An optional idempotency key for safely retrying payment requests
    # @option opts [VoidRequest] :void_request 
    # @return [Array<(VoidAcceptedResponse, Integer, Hash)>] VoidAcceptedResponse data, response status code and response headers
    def void_a_payment_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PaymentsApi.void_a_payment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PaymentsApi.void_a_payment"
      end
      pattern = Regexp.new(/^(pay)_(\w{26})$/)
      if @api_client.config.client_side_validation && id !~ pattern
        fail ArgumentError, "invalid value for 'id' when calling PaymentsApi.void_a_payment, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/payments/{id}/voids'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Cko-Idempotency-Key'] = opts[:'cko_idempotency_key'] if !opts[:'cko_idempotency_key'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'void_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'VoidAcceptedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['ApiSecretKey']

      new_options = opts.merge(
        :operation => :"PaymentsApi.void_a_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#void_a_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
